                               
                                //  ДОМ
   
////////////////////  2 способа свзяи JS документа с HTML

//1. способы навигации по HTML через JS (доступ к элементам div,ul, p, и т.д )
// let ul = document.querySelector(`.list`); // тут получаем объект на прямую

// console.log(ul);
// console.log(ul.children);  /// 1 способ делать навигацию по объетку(псевдомасив)
// console.log(ul.parentNode);  /// 2 способ обратится к родительскому контейнеру
// console.log(ul.previousElementSibling);  /// 3 способ обратится к предыдущему соседу
// console.log(ul.nextElementSibling);  /// 4 способ обратится к  соседу за объектом

// 2..
//2.1
// let itens = document.querySelectorAll(`.itens`); 
//получаем результат в формате псевдомассива на прямую (псевдомасив с элементами)
// console.log(ul);

//2.2 второй вариант как сделать массив это
// let result = Array.from(itens);
// console.log(result);


//////////////////////  Взаимодействие с класами HTML

///classlist  - работа с ключами объекта

// let ul = document.querySelector(`.list`); // тут получаем объект на прямую
// console.log(text.classlist.lenght);
// console.log(text.classlist.contains(`par`));// проверка, есть ли такой класс (да или нет ответ)
//типа инклюдса

// text.classlist.add(`big text`); // метод добавления класса к уже существующему классу
// text.classlist.toggle(`par`);
//  // если такой клас есть удалит, если нету добавит(очень популярный)
//  elem.classList.contains(cls)
//  elem.classList.remove(cls)

 
 //////////////attribute

//  elem.hasAttribute(name)  //проверяем конкретный адрибут у элемента (тру или фолс)
//  elem.getAttribute(name)  //  покажет атрибут который мы ищем

//  elem.setAttribute(name, value)  // сделать можно создать атрибут которого не было 
// name - название атрибута , value - что будет в этом атрибуте

//  elem.removeAttribute(name)   // удалить атрибут


/////////////////////// датасет и датаинфо

// li.dataset.555

///// Как получить информацию к контекту, например пешки.

// let par = document.querySelector(`.text`)
// console.log(par.textContent);
// par.innerHTML= `<span>kdfg kjkj  kjkjk</span>` // он вставляем текст

////////////////  копирование 

// let ul = document.querySelector (`.list`)
// console.log(ul);
// let copy = ul.cloneNode(true); // копирует всю улку со все содержимым, если фалс то только ul
// console.log(copy);


ПОИСК
Новые методы
elem.querySelector(selector) Используется когда мы заведомо знаем, что подходящий элемент только один.

Возвращает не все, а только первый элемент, соответствующий CSS-селектору selector. Иначе говоря – ищется только первое совпадение, после чего поиск прекращается.
Если ничего не найдено, вернет null.
elem.querySelectorAll(selector) Используется когда мы заведомо знаем, что подходящих элементов более одного.

Возвращает псевдомассив всех элементов внутри elem, удовлетворяющих CSS-селектору selector.
Псевдо-классы в selector, такие как :hover и :active, также поддерживаются.
Если ничего не найдено вернет пустой массив.
Устаревшие методы
document.getElementById(id)	Выбирает дом узел по идентификатору id. Возвращает ссылку на найденый DOM-узел или null если ничего не найдено.

elem.getElementsByTagName(tag)	Ищет все элементы с заданным тегом tag внутри элемента elem и возвращает их в виде списка

elem.getElementsByClassName(cls)	Возвращает коллекцию элементов с классом cls. Находит элемент и в том случае, если у него несколько классов, а искомый – один из них.

АТРИБУТЫ
Работа с атрибутами тегов HTML
elem.hasAttribute(name)	Проверяет наличие аттрибута, ВОЗВРАЩАЕТ TRUE/FALSE

elem.getAttribute(name)	ПОЛУЧАЕТ значение атрибута и возвращает его

elem.setAttribute(name, value)	УСТАНАВЛИВАЕТ атрибут

elem.removeAttribute(name)	УДАЛЯЕТ атрибут

elem.attributes	свойство, возвращает КОЛЛЕКЦИЮ всех атрибутов элемента

DOM-СВОЙСТВА
.hidden Работает так же, как style = "display: none". Возможные значния true или false.

.value Содержит контент input, select, textarea.

.href	Содержимое атрибута href ссылки.

.alt	Альтернативный текст изображения.

КЛАССЫ
Методы для работы с классами элемента. Оперирует значениями атрибута class="..." тегов HTML
elem.classList.contains(cls)	проверяет есть ли такой класс в значение атрибута class="" элемента ВОЗВРАЩАЕТ TRUE/FALSE

elem.classList.add(cls)	добавляет класс cls в значение атрибута class="" элемента

elem.classList.remove(cls)	удаляет класс cls в значение атрибута class="" элемента

elem.classList.toggle(cls)	если класса cls нет, добавляет его, если есть - удаляет.

Объект_CSSStyleDeclaration
почитать Объект CSSStyleDeclaration — это объект, который возвращается, когда мы хотим получить значение стиля из JS

Объект CSSStyleDeclaration свойства:

CSSStyleDeclaration.cssText - возвращает/устанавливает текстовое представление CSS стиля. CSSStyleDeclaration.length - возвращает КОЛИЧЕСВО стилей CSS. CSSStyleDeclaration.parentRule - возвращает CssRule медиа-запроса CSS.

методы:

CSSStyleDeclaration.getPropertyPriority() - возвращает значение флага important CSSStyleDeclaration.getPropertyValue() - возвращает значение свойства CSSStyleDeclaration.item() - возвращает имя свойства CSSStyleDeclaration.removeProperty() - удаляет свойство из CSS Declaration Block CSSStyleDeclaration.setProperty() - меняет существующее или создает новое свойство

CSS_variables
Стандартными методами получения/установки переменных CSS3 являются .setProperty() и .getPropertyValue(). Если переменные являются глобальными (объявлено в :root), то можно использовать следующее для получения и установки своих значений.

// setter
document.documentElement.style.setProperty('--myVariable', 'blue'); 
// параметры метода setProperty (СSS-переменная , новое значение)

// getter
document.documentElement.style.getPropertyValue('--myVariable');
DOM-УЗЛЫ
Создание.
.createElement("тег") создаст HTML тег указанный аргументом

innerHTML += <тег> контент </тег> пишем строку браузер преобразует в валидный код

Вставка.
Сперва указываем РОДИТЕЛЯ вставки затем КУДА вставляем затем КАКОЙ елемент

1-родитель 2-место вставки 3-созданный елемент
node.append(nodes)	добавляет nodes в КОНЕЦ node

node.prepend(nodes)	добавляет nodes в НАЧАЛО node

node.after(nodes)	добавляет nodes ПОСЛЕ узла node

node.before(nodes)	добавляет nodes ПЕРЕД узлом node

node.replaceWith(nodes)	добавляет nodes ВМЕСТО node

insertAdjacentHTML/Element/Text
Метод insertAdjacentHTML парсит указанную строку как HTML и добавляет результирующие узлы в указанное место DOM-дерева.

Он не делает повторный рендеринг как innerHTML для существующих элементов внутри элемента-родителя на котором используется. Это делает его намного быстрее, чем innerHTML.

element.insertAdjacentHTML(position, newElem);
elem.insertAdjacentElement(position, newElem);
elem.insertAdjacentText(position, text);
elem.insertAdjacentElement(position, newElem) - вставляет в произвольное место не HTML-строку, а элемент newElem.

elem.insertAdjacentText(position, text) - создаёт текстовый узел из строки text и вставляет его в указанное место относительно elem.

Позиции
position - позиция относительно element и должна быть одной из следующих значений:

beforebegin	перед element afterbegin	внутрь element, в самое начало контента beforeend	внутрь element, в самый конец контента afterend	после element

Удаление.
elem.remove() - удаляет elem из DOM

elem.remove("elem") - удаляет elem который указан аргументом из elem-который указан вначале. Например если нужно удалить дочерний елемент , который входит в состав родительского елемента

ПОЛУЧАЕМ и ВСТАВЛЯЕМ КОНТЕНТ
innerHTML
elem.innerHTML позволяет получить содержимое элемента в виде строки. Оно доступно как для чтения так и для записи.

Используя innerHTML можем добавить что-то внутрь элемента. для создания новых DOM-узлов.

Лучше использовать insertAdjacentHTML так как он бысрее.

textContent / innerText
elem.textContent содержит только текст внутри элемента, за вычетом всех тегов. textContent доступен для записи, при чем вне зависимости что будет передано в textContent, данные всегда будут записаны как текст.

elem.innerText устаревшая версия. делает тоже что и elem.textContent

HTM5 DATA-АТРИБУТЫ
В HTML5 можно создавать произвольный атрибут и получать значения этого атрибута в JavaScript.
Прием использования произвольного атрибута заключается в следующем:
Создается атрибут общий для группы input: к корню слова date через дефис дописывают произвольный суффикс (например - "data-color").

Вновь созданному атрибуту присваивается значение, связанное с данным input (например - "red", "blue" и т.д.)

В JavaScript обращаемся к псевдомассиву элементов input для получения значения input - elem.value

В JavaScript обращаемся к псевдомассиву элементов input для получения значения атрибута input - elem.dataset.color

НАВИГАЦИЯ ПО УЗЛАМ.
elem.parentNode	Выберет РОДИТЕЛЯ elem
Псевдомассиы
elem.children	Псевдо-массив хранит только ДОЧЕРНИЕ УЗЛЫ-ЭЛЕМЕНТЫ, то есть ТЕГИ

elem.childNodes	Псевдо-массив хранит ВСЕ ДОЧЕРНИЕ элементы, то есть ТЕГИ и ТЕКСТОВЫЕ

Первый внутри родителя
elem.firstElementChild	Выберет ПЕРВЫЙ ДОЧЕРНИЙ УЗЕЛ-ЭЛЕМЕНТ внутри elem, то есть ТЕГ

elem.firstChild	Выберет ПЕРВЫЙ ДОЧЕРНИЙ элемент внутри elem, включая ТЕКСТОВЫЕ узлы.

Последний внутри родителя
elem.lastElementChild	Выберет ПОСЛЕДНИЙ ДОЧЕРНИЙ УЗЕЛ-ЭЛЕМЕНТ внутри elem. то есть ТЕГ

elem.lastChild	Выберет ПОСЛЕДНИЙ ДОЧЕРНИЙ элемент внутри elem, включая ТЕКСТОВЫЕ узлы.

Слева от соседа
elem.previousElementSibling	Выберет УЗЕЛ-ЭЛЕМЕНТ "слева" от elem (его предыдущего соседа)

elem.previousSibling	Выберет элемент "слева" от elem (его предыдущего соседа)

Справа от соседа
elem.nextElementSibling	Выберет УЗЕЛ-ЭЛЕМЕНТ "справа" от elem (его предыдущего соседа)

elem.nextSibling	Выберет элемент "справа" от elem (его следующего соседа)

//////////////////////////// DOM часть 2 ////////////////







