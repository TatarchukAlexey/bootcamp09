                   
//                     Инструкция по написанию Галпа
// Gulp - это инструмент, который помогает автоматизировать рутинные задачи веб-разработки. Он предназначен для решения таких задач, как:

// Создание веб-сервера и автоматическая перезагрузка страницы в браузере при сохранении кода. Слежение за изменениями в файлах проекта.
// Использование различных JavaScript, CSS и HTML препроцессоров.Минификация CSS и JS кода, а также, оптимизация и конкатенация отдельных файлов проекта в один.
// Автоматическое создание вендорных префиксов для CSS. Управление файлами и папками в рамках проекта - создание, удаление, переименование.
// Работа с изображениями - сжатие, создание спрайтов.

// 1, Скачиваем ноду и гит. Создаем основные папки. Общую для галпа в ней будет src(fonts,html....)+1 файл где будет написана инструкция
// и клеить все дополнительные модули galpfile, 
// 1,2 Запускаем гит и скачиваем базу ноды с модулями основными + package.json (npm init - в Гите запускаем и все должно подгрузится) (просто нажимайте enter, пока вы не получите JSON-сниппет и вопрос is this ok ?)
// 3  По факту весь Галп это  список модулей которых надо прописать в galpfiles
// 4. Заходим на сайт где хранятся все библиотеки https://bc9goit.slack.com/messages/CEY3US4UT/
// 5. Скачиваем через Git модули  с помощью команды (npm i) (gulp-imagemin) (инсталяция) (название файла)
// 6, Прописуем константы и к ним gulp.task по каждой папке как на примере ниже.
// 7. Через runSequence запускаем финальную функцию которая запустит все модули Галпа
// 8, в packageюjson в данном поле "scripts": {  создаем  // "start": "gulp build",//, build старта должен совпадать с параметрои runSequence. Как только вы сделаете это, вы сможете запускать приложение командой npm start.
// 9. @import "menu.scss"; привязываем главный CSS файл (style.css) c menu.css (тут все пишем, пишем свой кусок)
// 10. (//= html/menu.html) привязываем главный HTML файл (index.html) c menu.html (в послднем пишем весь html код )
// N/B в билде ничего не пишем!!!. Но знаем что все в финале запушится в бил и именно там будет хранится итоговый файл.
// Главное чтобы были пути все правильно прописанны
//Важно, запускаем GIT с папки где создан гланвый галп файл!!!иначе не будет ничего работать
//Не добавляйте папку node_modules в систему контроля версий, так что если вы используете Git, не забывайте добавить ее в файл .gitignore.

// npm start - команда по запуска Галпа через Gid (ctrl+C зброс галпа)

const gulp = require ("gulp");
// Оператор require указывает Node просмотреть папку node_modules на наличие пакета с именем gulp
const rigger = require ("gulp-rigger"); /// команда require - говорит о том, что я требую загрузить файл который в дужках
const cssnano = require ("gulp-cssnano"); /// команда require - говорит о том, что я требую загрузить файл который в дужках
const sass = require ("gulp-sass"); /// команда require - говорит о том, что я требую загрузить файл который в дужках
const autoprefixer = require ("gulp-autoprefixer"); /// команда require - говорит о том, что я требую загрузить файл который в дужках
const imagemin = require ("gulp-imagemin"); /// команда require - говорит о том, что я требую загрузить файл который в дужках
const browserSync = require('browser-sync').create(); //для обновления странички, чтобы был онлайн кодинг на любом редакторе
const runSequence = require('run-sequence'); //функция по запуску всей сборки

// Правила:
// Инструкция-сборка ДЛЯ HTML (это библиотеки через которые мы будем прогонять галп)
// task - наверное основной метод Gulp, создает задачу которую можно будет выполнить через npm-скрипт
// Первый аргумент task-name указывает имя задачи по которому мы будем обращаться всякий раз, когда захотим запустить задачу на выполнение.
//  Вторым аргументом передаем callback-функцию которая будет исполнена при обращении к задаче
gulp.task ("html", function(){ 
    return gulp.src ('./src/index.html') // пишем откуда берем инфу
    .pipe(rigger())   // говорим через какие плагины мы прогоним галп
    .pipe(gulp.dest('./build/'))   /// адрес куда надо выгрузить файл
    .pipe(browserSync.stream());   /// /// автоматом ставим LIVE запись HTML
    
});
//Правило:  gulp-таск берет данные указаные в src, после чего используя pipe(gulp-плагин) вызывает gulp-плагины на этих данных,
//  последовательно, в указаном порядке, после чего записывает результат в путь указаный gulp.dest.
// То есть метод pipe берет результат выполнения предущего шага и передает его в плагин переданный ему в виде аргумента.


// Инструкция-сборка ДЛЯ CSS (это библиотеки через которые мы будем прогонять галп)
gulp.task('sass', function () {
    return gulp.src('./src/scss/style.scss')
      .pipe(sass().on('error', sass.logError))
      .pipe(autoprefixer({
        browsers: ['last 2 versions'],
        cascade: false
    }))
      .pipe(cssnano())
      .pipe(gulp.dest('./build/css'))  /// адрес куда надо выгрузить файл
      .pipe(browserSync.stream());  /// автоматом ставим LIVE запись CSS     
  });

// Инструкция-сборка ДЛЯ картинок (это библиотеки через которые мы будем прогонять галп)
gulp.task('img', () =>
    gulp.src('./src/images/*')
        .pipe(imagemin())
        .pipe(gulp.dest('./build/images/*'))
);

// Инструкция-сборка для fonts
gulp.task('fonts', () =>
gulp.src('./src/fonts/*')
.pipe(gulp.dest('./build/fonts/*')));

// Инструкция-сборка для browserSync  (LIVE сервис)
gulp.task('browser-sync', function() {
    browserSync.init({
        server: {
            baseDir: "./build"
        }
    });
});

// смотрит за всеми изменениями в штмл цсс и жс, он уже закачен ранее.
gulp.task('watch', function() {                  
    gulp.watch('src/html/*.html',['html']);
    gulp.watch('src/scss/*.scss',['css']);
    // gulp.watch('src/js/*.js',['js']);
});


//функция по запуску всей сборки
gulp.task('build', function(callback) {     
 ///важно , названия елементов в runSequence(....)  должны совпадать с тасками выше!!   
    runSequence(
        "html",
        'sass',
        'img',
        'fonts',
        'browser-sync',
        'watch',
        callback);
});







